import { clone } from 'lodash';
import {
  INITIALIZE_BARS,
  SELECT_BAR,
  CHANGE_SELECTED_BAR_VALUE,
} from '../constants/actionTypes';

/**
 * Marks a bar as selected based on the passed in id
 * Deselects all other bars
 */
function selectBar(bars, id) {
  const updatedBars = bars.map((bar) => {
    if (bar.id === id) {
      return { ...bar, selected: true };
    }
    return { ...bar, selected: false };
  });
  return updatedBars;
}

/**
 * Chages value of a selected bar by adding the valueToBeAdded 
 * to the existing value.
 * If the new value is less than zero
 * then the value is set at zero
 * else it is set to the result of existing value + value to be added
 */
function changeBarValue(bars, valueToBeAdded) {
  const updatedBars = bars.map((bar) => {
    if (bar.selected) {
      let computedValue = bar.value + valueToBeAdded;
      if (computedValue < 0) {
        computedValue = 0;
      }
      return { ...bar, value: computedValue };
    }
    return bar;
  });
  return updatedBars;
}

/**
 * Bar reducer handles state changes generated by bar actions
 */
export default function reducer(state = [], action) {
  switch (action.type) {
    case INITIALIZE_BARS:
      return action.payload || null;
    case SELECT_BAR:
      return selectBar(clone(state), action.payload);
    case CHANGE_SELECTED_BAR_VALUE:
      return changeBarValue(clone(state), action.payload);
    default:
      return state;
  }
}